#!/usr/bin/env bash
# shellcheck disable=2001,2002,2018,2019
usage1="ydm [OPTION...] URL ARTIST - TITLE"
usage2="ydm [OPTION...] URL ARTIST / TITLE"
doc="
Usage

  $usage1
  $usage2

Description

  This script downloads, normalizes, and tags audio from arbitrary youtube
  videos. It performs the following 3 steps:

  * Downloads youtube audio from URL into the native format with the highest
    bitrate -- usually an OOG (webm) file.
  * Normalizes the audio volume and re-compresses into an AAC (m4a) file -- AAC
    is used because it matches the compression of mp3 but with improved audio
    quality for the marginal bitrates characteristic of youtube videos.
  * Tags the audio based on the ARTIST and TITLE. The tagging script does
    various fuzzy searching things to get the album title, album artwork,
    earliest release year, and album genre(s).

Required arguments

  URL     The youtube URL. Must begin with 'http'.
  ARTIST  The artist name. Should be separated from TITLE with a dash surrounded
          by spaces or with a slash *optionally* surrounded by spaces. In the
          former case, the file is saved loose in the music directory. In the
          latter case, the file is saved in an ARTIST subdirectory. This naming
          convention is required for the ydm-metadata algorithm to work.
  TITLE   The song name. The file will be saved with m4a or mp3 format
          depending on whether the '--mp3' flag was passed.

Optional arguments

  -h|--help              Print this message.
  -4|--m4a               Save as M4A. This is the default.
  -3|--mp3               Save as MP3 instead of M4A.
  -q|--quick             Skip the tagging step.
  -Q|--very-quick        Skip the volume normalization and tagging steps.
  -c=N|--cut-leading=N   Trims the leading N seconds.
  -C=N|--cut-trailing=N  Trims the trailing N seconds.
  -*                     Remaining flags passed to ydm-metadata.
"
shopt -s nullglob
# Helper functions
# NOTE: Could also use afinfo for this part
# let bits=$(afinfo "$path_dl" | grep 'bit rate' | tr -dc '[0-9]')/1000
bitrate() {
  ffmpeg -i "$1" -hide_banner 2>&1 | cat | grep 'bitrate' | cut -d, -f3 | tr -dc 0-9
}
raise() {
  echo "$usage1"
  echo "$usage2"
  echo "Error: $*"
  exit 1
}
cleanup() {  # remove previous download products
  [ -n "$path_template" ] && rm "${path_template%.*}".* 2>/dev/null
  [ -n "$path_normalized" ] && rm "$path_normalized" 2>/dev/null
}

# Define exit trap
trap "cleanup" EXIT  # remove files on exit or interruption!

# Configuration file
config=$(dirname "$(realpath "$0")")/.config
[ -r "$config" ] || raise "Config file \"$config\" not found."
read -r -a args < <(cat "$config" | grep 'flags' | cut -s -d'=' -f2 | xargs)
args+=("$@")  # apply default .config flags then overwrite with input flags

# Parse input
quick=0  # 1 means skip metadata, 2 means skip normalization
ydmflags=(-q -f bestaudio --no-playlist)
normflags=(-t -23)  # normalize to default of -23
for arg in "${args[@]}"; do
  case "$arg" in
    -h|--help)             echo "$doc" && exit 0 ;;
    -3|--mp3)              mp3=true              ;;
    -4|--m4a)              mp3=false             ;;
    -q|--quick)            quick=1               ;;
    -Q|--very-quick)       quick=2               ;;
    -c=*|--cut-leading=*)  lead=${arg#*=}        ;;
    -C=*|--cut-trailing=*) trail=${arg#*=}       ;;
    -[-a-zA-Z0-9]*)        metaflags+="$arg "    ;;
    *)
      if [ -z "$url" ]; then
        url="$arg"  # the URL
      else
        name+=" $arg"  # the filename
      fi
      ;;
  esac
done
name=$(echo "$name" | awk '{$1=$1};1')  # trim whitespace: https://unix.stackexchange.com/questions/102008/how-do-i-trim-leading-and-trailing-whitespace-from-each-line-of-some-output


#-----------------------------------------------------------------------------#
# Initial stuff
#-----------------------------------------------------------------------------#
# 'Extra' arguments for trimming time; can be passed to ffmpeg-normalize
# See this link for trimming: https://superuser.com/questions/258032/is-it-possible-to-use-ffmpeg-to-trim-off-x-seconds-from-the-beginning-of-a-video
trimflag="-e=" # open
if [ -n "$lead" ]; then
  echo "Trimming first $lead seconds."
  trimflag+="-ss $lead "
fi
if [ -n "$trail" ]; then
  echo "Trimming last $trail seconds."
  trimflag+="-sseof $trail "
fi

# Trim trialing spaces for filenames
[ -n "$url" ] || raise "Must supply URL."
echo "URL: $url"
[ -n "$name" ] || raise "Must supply artist and title."
echo "Name: '$name'"

# Download directory
# Note 'cut' will automatically trim leading/trailing whitespace it seems
directory="$(cat "$config" | grep "directory" | cut -s -d '=' -f 2 | xargs)"
directory="${directory/"~"/$HOME}" # don't expand spaces, but expand ~
directory="${directory%/}" # trim trailing slash if present
[ -n "$directory" ] || raise "Output directory must be declared in the \"$config\" file with 'directory=DIRECTORY'."
[ -d "$directory" ] || raise "Output directory \"$directory\" does not exist or is not a directory."

# MP3 or M4A?
if [ -z "$mp3" ]; then
  mp3=$(cat "$config" | grep "mp3" | cut -s -d '=' -f 2 | tr A-Z a-z | xargs)
  [ -n "$mp3" ] || mp3="false"
  if ! [[ "$mp3" == "true" || "$mp3" == "false" ]]; then
    raise "Value 'mp3' in .config file must be either 'true' or 'false'."
  fi
fi
$mp3 && ext="mp3" || ext="m4a"

# Create artist directory if necessary
if [[ "$name" =~ '/' ]]; then
  num=$(echo "$name" | tr -cd '/' | wc -c)
  [ "$num" -eq 1 ] || \
    raise "Path name '$name' must have only one forward slash. Found $num slashes."
  name=$(echo "$name" | sed 's: */ *:/:g')
  artist=${name%/*}
  [ -d "$directory/$artist" ] \
    || mkdir "$directory/$artist" \
    || raise "Failed to make directory '$directory/$artist'."
elif ! [[ "$name" =~ ' - ' ]]; then
  echo "Warning: To add metadata file must be in format 'ARTIST - TITLE' or 'ARTIST/TITLE'."
fi

# Paths
# TODO: Support for downloading entire playlists or albums
path_template="$directory/$name-download.%(ext)s"  # see youtube-dl help info; just picks whatever extension
path_normalized="$directory/$name-normalized.$ext"
path_final="$directory/$name.$ext"

#------------------------------------------------------------------------------#
# Download, using youtube-dl
#------------------------------------------------------------------------------#
# NOTE: Previously used youtube-dl --get-filename but this causes irritating
# delay. Easier to just query results with a glob pattern.
echo "Downloading."
youtube-dl "${ydmflags[@]}" "$url" -o "$path_template" # no playlist, in case user provides playlist URL
paths_dl=("${path_template%.*}".*)
[ ${#paths_dl[@]} -eq 0 ] && raise "Download failed."
[ ${#paths_dl[@]} -gt 1 ] && raise "Ambiguous download results: ${paths_dl[*]}"
[ $quick -ge 2 ] && exit 0
path_dl="${paths_dl[0]}"

#------------------------------------------------------------------------------#
# Normalize audio and re-compress into AAC
#------------------------------------------------------------------------------#
# Get bitrate
# * The units are Loudness Units Relative to Full Scale.
#   Refers to the target average loudness units for track; this
#   will prevent clipping of sounds up to 26dB above this average.
#   See: https://www.pro-tools-expert.com/home-page/2016/9/6/video-mastering-using-lufs
# * Note default iTunes default bitrate is 256kbs. This step will save
#   file with output bitrate roughly matching original bitrate. Save into m4a
#   because it is better, more efficient format than mp3.
# WARNING: For some reason ffmpeg-normalize sometimes elevates the bitrate by
# a ton, while simple ffmpeg command (e.g. ffmpeg -i file1.m4a -c:a libfdk_aac file2.m4a)
# does not change the bitrate much. So manually specify output bitrate.
bitrate=$(bitrate "$path_dl")
echo "Bitrate: ${bitrate}kbps"
bitrate=$((bitrate*3/2))

# Save to m4a, uses highest quality encoder
if ! $mp3; then
  echo "Normalizing volume and saving to m4a."
  ffmpeg-normalize "$path_dl" "$trimflag" "${normflags[@]}" \
    -f -c:a aac -b:a ${bitrate}k -o "$path_normalized" \
    || raise "Normalization failed."
# Save to mp3
else
  echo "Normalizing volume and saving to mp3."
  ffmpeg-normalize "$path_dl" "$trimflag" "${normflags[@]}" \
    -f -c:a libmp3lame -b:a ${bitrate}k -o "$path_normalized" \
    || raise "Normalization failed."
fi

# Cleanup
echo "Bitrate: ${bitrate}kbps"
rm "$path_dl"
mv "$path_normalized" "$path_final"
[ $quick -ge 1 ] && exit 0

#------------------------------------------------------------------------------#
# Change metadata using python function
#------------------------------------------------------------------------------#
echo "Adding metadata."
ydm-metadata $metaflags --url "$url" "$path_final" \
  || raise "Metadata script failed."
